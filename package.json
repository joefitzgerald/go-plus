{
  "name": "go-plus",
  "description": "Makes working with Go in Atom awesome.",
  "keywords": [
    "go",
    "golang",
    "autocomplete",
    "gofmt",
    "gocode",
    "format",
    "fmt",
    "godef",
    "godoc",
    "goimports",
    "gorename",
    "goreturns",
    "lint",
    "vet",
    "gometalinter",
    "go-debug",
    "delve",
    "hyperclick",
    "guru"
  ],
  "version": "5.1.1",
  "main": "./lib/main",
  "license": "Apache-2.0",
  "engines": {
    "atom": ">=1.12.7 <2.0.0",
    "node": ">= 6"
  },
  "author": "Joe Fitzgerald <jfitzgerald@pivotal.io> (http://github.com/joefitzgerald)",
  "homepage": "https://atom.io/packages/go-plus",
  "repository": "https://github.com/joefitzgerald/go-plus",
  "bugs": {
    "url": "https://github.com/joefitzgerald/go-plus/issues"
  },
  "activationHooks": [
    "core:loaded-shell-environment"
  ],
  "activationCommands": {
    "atom-workspace": [
      "golang:get-package",
      "golang:update-tools",
      "golang:toggle-panel",
      "golang:gofmt",
      "golang:goimports",
      "golang:goreturns",
      "golang:showdoc"
    ],
    "atom-text-editor[data-grammar~=\"go\"]:not([mini])": [
      "golang:run-tests",
      "golang:hide-coverage",
      "golang:gorename"
    ]
  },
  "dependencies": {
    "ansi-to-html": "^0.5.0",
    "etch": "^0.8.0",
    "etch-octicon": "^0.1.0",
    "fs-plus": "^2.9.3",
    "lodash": "^4.17.4",
    "rimraf": "^2.6.0",
    "semver": "^5.3.0",
    "temp": "^0.8.3"
  },
  "devDependencies": {
    "fs-extra": "^1.0.0",
    "standard": "^8.6.0"
  },
  "providedServices": {
    "go-config": {
      "versions": {
        "1.0.0": "provideGoConfig"
      }
    },
    "go-get": {
      "versions": {
        "2.0.0": "provideGoGet"
      }
    },
    "linter": {
      "versions": {
        "1.0.0": "provideLinter"
      }
    },
    "autocomplete.provider": {
      "versions": {
        "2.0.0": "provideAutocomplete"
      }
    },
    "hyperclick.provider": {
      "versions": {
        "0.0.0": "provideHyperclick"
      }
    }
  },
  "consumedServices": {
    "status-bar": {
      "versions": {
        "^1.0.0": "consumeStatusBar"
      }
    },
    "go-plus.view": {
      "versions": {
        "0.1.0": "consumeViewProvider"
      }
    }
  },
  "configSchema": {
    "panelDisplayMode": {
      "title": "Panel Display Mode",
      "description": "Control the behavior of the go-plus panel when a new Atom window is opened",
      "type": "string",
      "default": "open",
      "enum": [
        "open",
        "closed"
      ],
      "order": 1
    },
    "panelOrientation": {
      "title": "Panel Orientation",
      "description": "Dock the panel to the bottom or right of the window",
      "type": "string",
      "default": "horizontal",
      "enum": [
        "horizontal",
        "vertical"
      ],
      "order": 2
    },
    "maxPanelHeight": {
      "title": "Maximum Panel Height",
      "description": "When the panel orientation is horizontal, prevent the panel from occupying the entire window",
      "type": "string",
      "default": "50vh",
      "order": 3
    },
    "minPanelHeight": {
      "title": "Minimum Panel Width",
      "description": "When the panel orientation is vertical, ensure the panel doesn't disappear when open",
      "type": "string",
      "default": "10vw",
      "order": 7
    },
    "currentPanelHeight": {
      "title": "Current Panel Height",
      "description": "When the panel orientation is horizontal, the height of the panel (this is changed when you drag the panel to resize it, so the setting is preserved)",
      "type": "string",
      "default": "15vh",
      "order": 5
    },
    "maxPanelWidth": {
      "title": "Maximum Panel Width",
      "description": "When the panel orientation is vertical, prevent the panel from occupying the entire window",
      "type": "string",
      "default": "50vw",
      "order": 6
    },
    "currentPanelWidth": {
      "title": "Current Panel Width",
      "description": "When the panel orientation is vertical, the width of the panel (this is changed when you drag the panel to resize it, so the setting is preserved)",
      "type": "string",
      "default": "15vw",
      "order": 8
    },
    "disabledBundledPackages": {
      "title": "Disabled Bundled Packages",
      "description": "go-plus bundles some third party packages; if you indicate that you do not want to be prompted for package installation, this comma separated list of package names will be updated",
      "type": "array",
      "default": [],
      "items": {
        "type": "string"
      },
      "order": 9
    },
    "config": {
      "title": "Config",
      "type": "object",
      "properties": {
        "gopath": {
          "title": "GOPATH",
          "description": "(Not Recommended For Use) If you have issues setting your GOPATH in your environment, you can use this to establish a fallback value. See https://github.com/joefitzgerald/go-config/wiki/GOPATH for more information.",
          "type": "string",
          "default": "",
          "order": 1
        }
      }
    },
    "autocomplete": {
      "title": "Autocomplete",
      "type": "object",
      "properties": {
        "scopeBlacklist": {
          "title": "Scope Blacklist",
          "description": "Suggestions will not be shown when the cursor is inside the following comma-delimited scope(s).",
          "type": "string",
          "default": ".source.go .comment, .source.go .constant.numeric, .source.go .string.quoted",
          "order": 1
        },
        "suppressBuiltinAutocompleteProvider": {
          "title": "Suppress The Provider Built-In To autocomplete-plus",
          "description": "Suppress the provider built-in to the autocomplete-plus package when editing .go files.",
          "type": "boolean",
          "default": true,
          "order": 2
        },
        "suppressActivationForCharacters": {
          "title": "Suppress Activation For Characters",
          "description": "Suggestions will not be provided when you type one of these characters.",
          "type": "array",
          "default": [
            "comma",
            "newline",
            "space",
            "tab",
            "/",
            "\\",
            "(",
            ")",
            "\"",
            "'",
            ":",
            ";",
            "<",
            ">",
            "~",
            "!",
            "@",
            "#",
            "$",
            "%",
            "^",
            "&",
            "*",
            "|",
            "+",
            "=",
            "[",
            "]",
            "{",
            "}",
            "`",
            "~",
            "?",
            "-"
          ],
          "items": {
            "type": "string"
          },
          "order": 3
        },
        "snippetMode": {
          "title": "Snippet Mode",
          "description": "When inserting suggestions for funcs, generate a snippet that includes parenthesis only (none), argument name (name), or argument name and type (nameAndType).",
          "type": "string",
          "default": "name",
          "enum": [
            "name",
            "nameAndType",
            "none"
          ],
          "order": 4
        },
        "proposeBuiltins": {
          "title": "Propose Builtins",
          "description": "Add built-in types, functions and constants to an autocompletion proposals. Default: true.",
          "type": "boolean",
          "default": true,
          "order": 5
        },
        "unimportedPackages": {
          "title": "Unimported Packages",
          "description": "Provide suggestions for unimported packages. Default: true.",
          "type": "boolean",
          "default": true,
          "order": 6
        }
      }
    },
    "format": {
      "title": "Format",
      "type": "object",
      "properties": {
        "formatOnSave": {
          "title": "Run Format Tool On Save",
          "description": "Run the configured format tool each time a file is saved",
          "type": "boolean",
          "default": true,
          "order": 1
        },
        "tool": {
          "title": "Format Tool",
          "description": "Choose one: goimports, goreturns, or gofmt",
          "type": "string",
          "default": "goimports",
          "enum": [
            "goimports",
            "goreturns",
            "gofmt"
          ],
          "order": 2
        }
      }
    },
    "get": {
      "title": "Go Get",
      "type": "object",
      "properties": {
        "timeout": {
          "title": "Timeout",
          "description": "Stop trying to update tools after this number of milliseconds",
          "type": "integer",
          "default": 60000,
          "order": 1
        }
      }
    },
    "lint": {
      "title": "Lint",
      "type": "object",
      "properties": {
        "args": {
          "title": "gometalinter Arguments",
          "description": "Arguments to be passed when invoking `gometalinter`. Please ensure the `--json` argument is always included. Arguments are comma-separated.",
          "type": "array",
          "default": [
            "--vendor",
            "--disable-all",
            "--enable=vet",
            "--enable=vetshadow",
            "--enable=golint",
            "--enable=ineffassign",
            "--enable=goconst",
            "--tests",
            "--json",
            "."
          ],
          "items": {
            "type": "string"
          },
          "order": 1
        }
      }
    },
    "navigator": {
      "title": "Navigator",
      "type": "object",
      "properties": {
        "mode": {
          "title": "Mode",
          "description": "Use guru or godef for go to definition",
          "type": "string",
          "default": "guru",
          "enum": [
            "guru",
            "godef"
          ],
          "order": 1
        }
      }
    },
    "test": {
      "title": "Test",
      "type": "object",
      "properties": {
        "runTestsOnSave": {
          "title": "Run Tests On Save",
          "description": "Run `go test -coverprofile` each time a file is saved",
          "type": "boolean",
          "default": true,
          "order": 1
        },
        "timeout": {
          "title": "Timeout",
          "description": "Stop running tests after this number of milliseconds",
          "type": "integer",
          "default": 60000,
          "order": 2
        },
        "runTestsWithShortFlag": {
          "title": "Run Tests With Short Flag Set",
          "description": "Runs `go test` with `-short` flag set",
          "type": "boolean",
          "default": true,
          "order": 3
        },
        "runTestsWithVerboseFlag": {
          "title": "Run Tests With Verbose Flag Set",
          "description": "Runs `go test` with `-v` flag set",
          "type": "boolean",
          "default": false,
          "order": 4
        },
        "coverageHighlightMode": {
          "title": "Coverage Highlight Mode",
          "description": "Control the way that coverage highlighting occurs",
          "type": "string",
          "default": "uncovered",
          "enum": [
            "covered-and-uncovered",
            "covered",
            "uncovered",
            "disabled"
          ],
          "order": 5
        },
        "coverageDisplayMode": {
          "title": "Coverage Display Mode",
          "description": "Control the way that coverage is displayed in the editor: gutter, or highlight",
          "type": "string",
          "default": "highlight",
          "enum": [
            "highlight",
            "gutter"
          ],
          "order": 6
        },
        "focusPanelIfTestsFail": {
          "title": "Focus The go-plus Panel If Tests Fail",
          "description": "If the panel is hidden, or the panel is showing a different tab, the panel will be expanded and the test tab focused when tests fail.",
          "type": "boolean",
          "default": true,
          "order": 7
        }
      }
    }
  },
  "standard": {
    "globals": [
      "advanceClock",
      "atom",
      "waitsForPromise"
    ]
  }
}
